<?xml version="1.0" encoding="UTF-8"?>
<generator_policy>

	<!--create a simple label-->
	<generator name="SimpleLabel">
		<pattern>{label}</pattern>
	</generator>
	
	<!--create a composite label-->
	<generator name="CompositeLabel">
		<pattern>{label} {text}</pattern>
	</generator>
	
	<!--use existing URI from source or define a UUID-->
	<generator name="URIorUUID">
		<custom generatorClass="gr.forth.URIorUUID">
			<set-arg name="text"></set-arg>
		</custom>
	</generator>
	
	<!--format a date (text parameter); bound can be Lower (time=00:00:00) or Upper (time=23:59:59)-->
	<generator name="GermanDateTime">
		<custom generatorClass="gr.forth.GermanDate">
			<set-arg name="bound" type="constant"></set-arg>
			<set-arg name="text"></set-arg>
		</custom>
	</generator>
	
	<!--generates a URN (using the scheme URN:UUID:<UUID_GENERATED_VALUE>) or 
	              a URI (using the scheme myNS:<UUID_GENERATED_VALUE> if a prefix="myNS" is defined) for a particular value of “text”. 
		The generator is responsible for producing different values for different input texts. 
		If a text value is given twice then only one URN will be generated (in the first time and re-used afterwards). -->
		
	<generator name="URIfromTextualContent" prefix="vre4eic">
        <custom generatorClass="gr.forth.TextualContent">
            <set-arg name="text" type="xpath"/>
        </custom>
    </generator>
	
	
	<!--generates a URI or a literal value by conacatenating several text# values.
	    The generator can be used for creating both URIs and literal values. More specifically the generator takes the following arguments:
		•	prefix: it is a constant value and denotes the prefix that should be used before concatenating the terms from the input. 
		    If the prefix value starts with http then the generated value will be a URI, otherwise, if it is empty or anything else it will generate a literal value.
		•	sameTermsDelim: the delimiter that will be used within the concatenated instances of a term 
		•	diffTermsDelim: the delimiter that will be used within the concatenated terms
		•	text#: an arbitrary number of terms indicating the XPath expressions that will fetch the terms that will be concatenated. 
		    This term text should be followed by an integer indicating the execution order for the concatenation; for example the terms under text1 
			will be concatenated, then the terms under text2, etc. -->
	<generator name="ConcatMultipleTerms">
		<custom generatorClass="gr.forth.ConcatMultipleTerms">
            <set-arg name="prefix" type="constant"/>
            <set-arg name="sameTermsDelim" type="constant"/>
            <set-arg name="diffTermsDelim" type="constant"/>
            <set-arg name="text1"/>
			<set-arg name="text2"/>
        </custom>
	</generator>
	
	<!--CERIF specific generators-->
	
	<!--to be used for all subclasses of cerif:CoreEntity
		arg1 should be a constant specifying the Entity CERIF Class e.g. Person, Organisation, Product etc. -->
	<generator name="CoreEntityURI" prefix="vre4eic">
		<pattern>{arg1}.{arg2}</pattern>
	</generator>
	
	<!--needed for specific cases for cerif:CoreEntity where we need 2 arguments
		arg1 should be a constant specifying the Entity CERIF Class e.g. Person, Organisation, Product etc. -->
	<generator name="CoreEntityURI-2" prefix="vre4eic">
		<pattern>{arg1}.{arg2}.{arg3}</pattern>
	</generator>
	
	<!--To be used for all Classifications -->
	<generator name="SemCerifURI" prefix="vre4eic">
		<pattern>Classification.{scheme}.{term}</pattern>
	</generator>
	
	<!--specialisation of CoreEntityURI. To be used for all Classification Schemes -->
	<generator name="ClassSchemeURI" prefix="vre4eic">
		<pattern>ClassScheme.{term}</pattern>
	</generator>
	
	<!--to be used for cerif:FederatedIdentifier-->
	<generator name="FedIdURI" prefix="vre4eic">
		<pattern>FederatedIdentifier.{issuer}.{value}</pattern>
	</generator>
	
	<!--needed for specific cases for cerif:FullLinkEntity-->
	<generator name="FullLinkURI" prefix="vre4eic">
		<pattern>{sourceType}.{sourceValue}.{destinationType}.{destinationValue}</pattern>
	</generator>
	
	<!-- URIWithPrefix to be replaced by CoreEntityURI or FedIdURI (mapping 50)-->
	
	<!-- MaTh: I prefer to keep SemCerifURI and ClassSchemeURI because they make the assignement of generators faster in 3M - you need to specify one argument, not two -->
	<!-- SemCerifURI to be replaced by CoreEntityURI with EntityCERIFClass=Classification (mappings 110, 111, 113, 114, 116, 117, 118, 120, 54, 71, 72, 73)-->
	<!-- ClassSchemeURI to be replaced by CoreEntityURI with EntityCERIFClass=ClassificationScheme (mappings 111, 113, 114, 116, 117, 118, 120, 71, 72, 73)-->
	
	<!-- MaTh: OK eurocris-LOD is not actually used by me. It exists only in the generator file-->
	<!-- eurocris-LOD to be replaced by CoreEntityURI (mappings 111, 113, 114, 116, 117, 118, 120, 50, 61, 71, 72, 73)-->
	
	<!-- MaTh: LocalTermURI-2 should be replaced by CoreEntityURI. This is why I suggest to change the arguments of CoreEntityURI to arg1 and arg2 so that the replacement is fast. -->
	<!-- remove LocalTermURI{-x} (mappings 110, 111, 113, 114, 116, 117, 118, 120, 50, 54, 61, 71, 72, 73)-->
	
	<!-- MaTh: Why do you want to remove CompositeLabel? I use it very often. Look in 71 how I create roleExpressions-->
	<!-- remove CompositeLabel{-x} (mappings 111, 113, 114, 116, 117, 118, 120, 50, 54, 61, 71, 72, 73)-->
	
</generator_policy>